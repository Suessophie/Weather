{"version":3,"sources":["ItemOfCities.jsx","ListOfCities.jsx","FormToAddCity.jsx","api/api.js","MainPage.jsx","DetailsPage.jsx","App.jsx","index.js"],"names":["ItemOfCities","city","deleteCityFromList","refreshDataForCity","getDetailsForCity","className","to","name","onClick","weather","main","Math","round","temp","type","id","ListOfCities","listOfCities","map","FormToAddCity","hasErrorOnInput","alreadyAdded","enteredCity","handleSubmit","valueOfEnteredCity","onSubmit","htmlFor","value","onChange","placeholder","getWeatherForCity","fetch","then","response","json","MainPage","key","initialValue","useState","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setListOfCities","setHasErrorOnInput","setAlreadyAdded","setValueOfEnteredCity","addCity","nameOfCity","a","currentWeather","updatedListOfCities","itemOfCities","length","filteredListOfCities","filter","event","target","preventDefault","some","DetailsPage","detailsOfWeather","setDetailsOfWeather","useEffect","detailsFromServer","console","log","feels_like","temp_min","temp_max","wind","speed","visibility","humidity","pressure","description","App","detailsForCity","setDetailsForCity","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25b6e633.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nexport const ItemOfCities = ({\n  city,\n  deleteCityFromList,\n  refreshDataForCity,\n  getDetailsForCity,\n}) => (\n  <div className=\"itemOfCities\">\n    <Link\n      className=\"itemOfCities__card\"\n      to={`/details/${city.name}`}\n      onClick={() => getDetailsForCity(city.name)}\n    >\n      <h2 className=\"itemOfCities__title\">\n        {city.name}\n      </h2>\n      <p className=\"itemOfCities__weather\">\n        {city.weather[0].main}\n      </p>\n      <p className=\"itemOfCities__temp\">\n        {Math.round(city.main.temp - 273.15)}\n        &deg;C\n      </p>\n    </Link>\n    <button\n      className=\"itemOfCities__button\"\n      type=\"button\"\n      onClick={() => deleteCityFromList(city.id)}\n    >\n      Delete\n    </button>\n    <button\n      className=\"itemOfCities__button\"\n      type=\"button\"\n      onClick={() => refreshDataForCity(city.name)}\n    >\n      Refresh\n    </button>\n  </div>\n);\n\nItemOfCities.propTypes = {\n  city: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    main: PropTypes.shape({\n      temp: PropTypes.number.isRequired,\n    }).isRequired,\n    weather: PropTypes.arrayOf(PropTypes.shape({\n      main: PropTypes.string.isRequired,\n    }).isRequired).isRequired,\n  }).isRequired,\n  deleteCityFromList: PropTypes.func.isRequired,\n  refreshDataForCity: PropTypes.func.isRequired,\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ItemOfCities } from './ItemOfCities';\n\nexport const ListOfCities = ({\n  listOfCities,\n  deleteCityFromList,\n  refreshDataForCity,\n  getDetailsForCity,\n}) => (\n  <div className=\"listOfCities\">\n    {listOfCities.map(city => (\n      <ItemOfCities\n        key={city.id}\n        city={city}\n        deleteCityFromList={deleteCityFromList}\n        refreshDataForCity={refreshDataForCity}\n        getDetailsForCity={getDetailsForCity}\n      />\n    ))}\n  </div>\n);\n\nListOfCities.propTypes = {\n  listOfCities: PropTypes.arrayOf.isRequired,\n  deleteCityFromList: PropTypes.func.isRequired,\n  refreshDataForCity: PropTypes.func.isRequired,\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FormToAddCity = ({\n  hasErrorOnInput,\n  alreadyAdded,\n  enteredCity,\n  handleSubmit,\n  valueOfEnteredCity,\n}) => (\n  <form\n    className=\"form\"\n    onSubmit={handleSubmit}\n  >\n    <label\n      className=\"form__label\"\n      htmlFor=\"city\"\n    >\n      To find new city\n    </label>\n    <input\n      className=\"form__input\"\n      id=\"city\"\n      name=\"city\"\n      value={valueOfEnteredCity}\n      onChange={enteredCity}\n      placeholder=\"Name of the city\"\n    />\n    {hasErrorOnInput && (\n      <div className=\"form__error\">\n        Please, enter correct city\n      </div>\n    )}\n    {alreadyAdded && (\n      <div className=\"form__error\">\n        Sorry, this city already added\n      </div>\n    )}\n    <button\n      className=\"form__button\"\n      type=\"submit\"\n    >\n      Find\n    </button>\n  </form>\n);\n\nFormToAddCity.propTypes = {\n  hasErrorOnInput: PropTypes.bool.isRequired,\n  alreadyAdded: PropTypes.bool.isRequired,\n  enteredCity: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  valueOfEnteredCity: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://api.openweathermap.org/data/2.5/';\nconst key = '58d4adb1fa8d521b3fec939570a8c986';\n\nexport const getWeatherForCity = city => fetch(\n  `${BASE_URL}weather?q=${city},ua&APPID=${key}`,\n)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ListOfCities } from './ListOfCities';\nimport { FormToAddCity } from './FormToAddCity';\n\nimport { getWeatherForCity } from './api/api';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n\n  const saveValue = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveValue];\n};\n\nexport const MainPage = ({ getDetailsForCity }) => {\n  const [listOfCities, setListOfCities] = useLocalStorage('cities', []);\n  const [hasErrorOnInput, setHasErrorOnInput] = useState(false);\n  const [alreadyAdded, setAlreadyAdded] = useState(false);\n  const [valueOfEnteredCity, setValueOfEnteredCity] = useState('');\n\n  const enteredCity = (event) => {\n    const { value } = event.target;\n\n    if (value !== valueOfEnteredCity) {\n      setHasErrorOnInput(false);\n      setAlreadyAdded(false);\n    }\n\n    setValueOfEnteredCity(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!listOfCities.some(\n      itemOfCities => itemOfCities.name === valueOfEnteredCity,\n    )) {\n      addCity(valueOfEnteredCity);\n      setValueOfEnteredCity('');\n    } else {\n      setAlreadyAdded(true);\n    }\n  };\n\n  const addCity = (city) => {\n    getWeatherForCity(city)\n      .then((weather) => {\n        if (weather.id) {\n          setListOfCities([...listOfCities, weather]);\n        } else {\n          setHasErrorOnInput(true);\n        }\n      });\n  };\n\n  const deleteCityFromList = (id) => {\n    const filteredListOfCities = listOfCities.filter(\n      itemOfCities => itemOfCities.id !== id,\n    );\n\n    setListOfCities(filteredListOfCities);\n  };\n\n  const refreshDataForCity = async(nameOfCity) => {\n    const currentWeather = await getWeatherForCity(nameOfCity);\n\n    const updatedListOfCities = listOfCities.map((itemOfCities) => {\n      if (itemOfCities.name === nameOfCity) {\n        return currentWeather;\n      }\n\n      return { ...itemOfCities };\n    });\n\n    setListOfCities(updatedListOfCities);\n  };\n\n  return (\n    <div className=\"mainPage\">\n      {listOfCities.length ? (\n        <ListOfCities\n          listOfCities={listOfCities}\n          deleteCityFromList={deleteCityFromList}\n          refreshDataForCity={refreshDataForCity}\n          getDetailsForCity={getDetailsForCity}\n        />\n      ) : (\n        <p>Please, enter name of the city</p>\n      )}\n      <FormToAddCity\n        hasErrorOnInput={hasErrorOnInput}\n        alreadyAdded={alreadyAdded}\n        enteredCity={enteredCity}\n        handleSubmit={handleSubmit}\n        valueOfEnteredCity={valueOfEnteredCity}\n      />\n    </div>\n  );\n};\n\nMainPage.propTypes = {\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getWeatherForCity } from './api/api';\n\nexport const DetailsPage = ({ city }) => {\n  const [detailsOfWeather, setDetailsOfWeather] = useState(null);\n\n  useEffect(() => {\n    getWeatherForCity(city)\n      .then((detailsFromServer) => {\n        setDetailsOfWeather(detailsFromServer);\n      });\n  }, [city]);\n\n  // eslint-disable-next-line\n  console.log(detailsOfWeather);\n\n  return (\n    <div className=\"detailsPage\">\n      {detailsOfWeather && (\n        <section className=\"detailsPage__card\">\n          <div className=\"detailsPage__main\">\n            <h2>{detailsOfWeather.name}</h2>\n            <div>\n              {detailsOfWeather.weather[0].main}\n            </div>\n            <div>\n              {Math.round(detailsOfWeather.main.temp - 273.15)}\n              &deg;C\n            </div>\n          </div>\n          <div className=\"detailsPage__details\">\n            <div className=\"detailsPage__item\">\n              {`Feels: ${Math.round(\n                detailsOfWeather.main.feels_like - 273.15,\n              )}`}\n              &deg;C\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Min temp: ${Math.round(\n                detailsOfWeather.main.temp_min - 273.15,\n              )}`}\n              &deg;C\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Max temp: ${Math.round(\n                detailsOfWeather.main.temp_max - 273.15,\n              )}`}\n              &deg;C\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Wind: ${detailsOfWeather.wind.speed}m/s`}\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Visibility: ${detailsOfWeather.visibility / 1000}km`}\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Humidity: ${detailsOfWeather.main.humidity}%`}\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Pressure: ${detailsOfWeather.main.pressure}gPa`}\n            </div>\n            <div className=\"detailsPage__item\">\n              {`Description: ${detailsOfWeather.weather[0].description}`}\n            </div>\n          </div>\n          <Link\n            className=\"detailsPage__button\"\n            to=\"/\"\n          />\n        </section>\n      )}\n    </div>\n  );\n};\n\nDetailsPage.propTypes = {\n  city: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport { MainPage } from './MainPage';\nimport { DetailsPage } from './DetailsPage';\n\nexport const App = () => {\n  const [detailsForCity, setDetailsForCity] = useState('');\n\n  const getDetailsForCity = (city) => {\n    setDetailsForCity(city);\n\n    // eslint-disable-next-line\n    console.log(city);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        Weather: Anywhere in UA\n      </h1>\n\n      <Switch>\n        <Route path=\"/details/:city\">\n          <DetailsPage city={detailsForCity} />\n        </Route>\n\n        <Route path=\"/\" exact>\n          <MainPage getDetailsForCity={getDetailsForCity} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}