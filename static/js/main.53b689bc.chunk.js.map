{"version":3,"sources":["components/ItemOfCities/ItemOfCities.jsx","shapes/CityShape.jsx","components/ListOfCities/ListOfCities.jsx","components/FormToAddCity/FormToAddCity.jsx","api/api.js","components/MainPage/MainPage.jsx","components/DetailsPage/DetailsPage.jsx","App.jsx","index.js"],"names":["ItemOfCities","PropTypes","shape","id","number","isRequired","name","string","main","temp","weather","arrayOf","city","deleteCityFromList","refreshDataForCity","getDetailsForCity","className","to","onClick","Math","round","type","ListOfCities","listOfCities","map","FormToAddCity","hasErrorOnInput","alreadyAdded","enteredCity","handleSubmit","valueOfEnteredCity","onSubmit","htmlFor","value","onChange","placeholder","getWeatherForCity","fetch","then","response","json","MainPage","key","initialValue","useState","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setListOfCities","setHasErrorOnInput","setAlreadyAdded","setValueOfEnteredCity","addCity","nameOfCity","a","currentWeather","updatedListOfCities","itemOfCities","length","filteredListOfCities","filter","event","target","preventDefault","some","DetailsPage","detailsOfWeather","setDetailsOfWeather","useEffect","detailsFromServer","feels_like","temp_min","temp_max","wind","speed","visibility","humidity","pressure","description","App","detailsForCity","setDetailsForCity","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53b689bc.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { CityShape } from '../../shapes/CityShape';\n\nimport './ItemOfCities.scss';\n\nexport const ItemOfCities = ({\n  city,\n  deleteCityFromList,\n  refreshDataForCity,\n  getDetailsForCity,\n}) => (\n  <div className=\"itemOfCities\">\n    <Link\n      className=\"itemOfCities__card\"\n      to={`/details/${city.name}`}\n      onClick={() => getDetailsForCity(city.name)}\n    >\n      <h2 className=\"itemOfCities__title\">\n        {city.name}\n      </h2>\n      <p className=\"itemOfCities__weather\">\n        {city.weather[0].main}\n      </p>\n      <p className=\"itemOfCities__temp\">\n        {Math.round(city.main.temp - 273.15)}\n        &deg;C\n      </p>\n    </Link>\n    <button\n      className=\"itemOfCities__button\"\n      type=\"button\"\n      onClick={() => deleteCityFromList(city.id)}\n    >\n      Delete\n    </button>\n    <button\n      className=\"itemOfCities__button\"\n      type=\"button\"\n      onClick={() => refreshDataForCity(city.name)}\n    >\n      Refresh\n    </button>\n  </div>\n);\n\nItemOfCities.propTypes = {\n  city: CityShape.isRequired,\n  deleteCityFromList: PropTypes.func.isRequired,\n  refreshDataForCity: PropTypes.func.isRequired,\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const CityShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  main: PropTypes.shape({\n    temp: PropTypes.number.isRequired,\n  }).isRequired,\n  weather: PropTypes.arrayOf(PropTypes.shape({\n    main: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CityShape } from '../../shapes/CityShape';\n\nimport { ItemOfCities } from '../ItemOfCities';\nimport './ListOfCities.scss';\n\nexport const ListOfCities = ({\n  listOfCities,\n  deleteCityFromList,\n  refreshDataForCity,\n  getDetailsForCity,\n}) => (\n  <div className=\"listOfCities\">\n    {listOfCities.map(city => (\n      <ItemOfCities\n        key={city.id}\n        city={city}\n        deleteCityFromList={deleteCityFromList}\n        refreshDataForCity={refreshDataForCity}\n        getDetailsForCity={getDetailsForCity}\n      />\n    ))}\n  </div>\n);\n\nListOfCities.propTypes = {\n  listOfCities: PropTypes.arrayOf(CityShape).isRequired,\n  deleteCityFromList: PropTypes.func.isRequired,\n  refreshDataForCity: PropTypes.func.isRequired,\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './FormToAddCity.scss';\n\nexport const FormToAddCity = ({\n  hasErrorOnInput,\n  alreadyAdded,\n  enteredCity,\n  handleSubmit,\n  valueOfEnteredCity,\n}) => (\n  <form\n    className=\"form\"\n    onSubmit={handleSubmit}\n  >\n    <label\n      className=\"form__label\"\n      htmlFor=\"city\"\n    >\n      To find new city\n    </label>\n    <input\n      className=\"form__input\"\n      id=\"city\"\n      name=\"city\"\n      value={valueOfEnteredCity}\n      onChange={enteredCity}\n      placeholder=\"Name of the city\"\n    />\n    {hasErrorOnInput && (\n      <div className=\"form__error\">\n        Please, enter correct city\n      </div>\n    )}\n    {alreadyAdded && (\n      <div className=\"form__error\">\n        Sorry, this city already added\n      </div>\n    )}\n    <button\n      className=\"form__button\"\n      type=\"submit\"\n    >\n      Find\n    </button>\n  </form>\n);\n\nFormToAddCity.propTypes = {\n  hasErrorOnInput: PropTypes.bool.isRequired,\n  alreadyAdded: PropTypes.bool.isRequired,\n  enteredCity: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  valueOfEnteredCity: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://api.openweathermap.org/data/2.5/';\nconst key = '58d4adb1fa8d521b3fec939570a8c986';\n\nexport const getWeatherForCity = city => fetch(\n  `${BASE_URL}weather?q=${city},ua&APPID=${key}`,\n)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ListOfCities } from '../ListOfCities';\nimport { FormToAddCity } from '../FormToAddCity';\n\nimport { getWeatherForCity } from '../../api/api';\nimport './MainPage.scss';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n\n  const saveValue = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveValue];\n};\n\nexport const MainPage = ({ getDetailsForCity }) => {\n  const [listOfCities, setListOfCities] = useLocalStorage('cities', []);\n  const [hasErrorOnInput, setHasErrorOnInput] = useState(false);\n  const [alreadyAdded, setAlreadyAdded] = useState(false);\n  const [valueOfEnteredCity, setValueOfEnteredCity] = useState('');\n\n  const enteredCity = (event) => {\n    const { value } = event.target;\n\n    if (value !== valueOfEnteredCity) {\n      setHasErrorOnInput(false);\n      setAlreadyAdded(false);\n    }\n\n    setValueOfEnteredCity(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!listOfCities.some(\n      itemOfCities => itemOfCities.name === valueOfEnteredCity,\n    )) {\n      addCity(valueOfEnteredCity);\n      setValueOfEnteredCity('');\n    } else {\n      setAlreadyAdded(true);\n    }\n  };\n\n  const addCity = (city) => {\n    getWeatherForCity(city)\n      .then((weather) => {\n        if (weather.id) {\n          setListOfCities([...listOfCities, weather]);\n        } else {\n          setHasErrorOnInput(true);\n        }\n      });\n  };\n\n  const deleteCityFromList = (id) => {\n    const filteredListOfCities = listOfCities.filter(\n      itemOfCities => itemOfCities.id !== id,\n    );\n\n    setListOfCities(filteredListOfCities);\n  };\n\n  const refreshDataForCity = async(nameOfCity) => {\n    const currentWeather = await getWeatherForCity(nameOfCity);\n\n    const updatedListOfCities = listOfCities.map((itemOfCities) => {\n      if (itemOfCities.name === nameOfCity) {\n        return currentWeather;\n      }\n\n      return { ...itemOfCities };\n    });\n\n    setListOfCities(updatedListOfCities);\n  };\n\n  return (\n    <div className=\"mainPage\">\n      {listOfCities.length ? (\n        <ListOfCities\n          listOfCities={listOfCities}\n          deleteCityFromList={deleteCityFromList}\n          refreshDataForCity={refreshDataForCity}\n          getDetailsForCity={getDetailsForCity}\n        />\n      ) : (\n        <p>Please, enter name of the city</p>\n      )}\n      <FormToAddCity\n        hasErrorOnInput={hasErrorOnInput}\n        alreadyAdded={alreadyAdded}\n        enteredCity={enteredCity}\n        handleSubmit={handleSubmit}\n        valueOfEnteredCity={valueOfEnteredCity}\n      />\n    </div>\n  );\n};\n\nMainPage.propTypes = {\n  getDetailsForCity: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getWeatherForCity } from '../../api/api';\nimport './DetailsPage.scss';\n\nexport const DetailsPage = ({ city }) => {\n  const [detailsOfWeather, setDetailsOfWeather] = useState(null);\n\n  useEffect(() => {\n    getWeatherForCity(city)\n      .then((detailsFromServer) => {\n        setDetailsOfWeather(detailsFromServer);\n      });\n  }, [city]);\n\n  return (\n    <>\n      {detailsOfWeather && (\n        <div className=\"detailsPage\">\n          <section className=\"detailsPage__card\">\n            <div className=\"detailsPage__main\">\n              <h2>{detailsOfWeather.name}</h2>\n              <div>\n                {detailsOfWeather.weather[0].main}\n              </div>\n              <div>\n                {Math.round(detailsOfWeather.main.temp - 273.15)}\n                &deg;C\n              </div>\n            </div>\n            <div className=\"detailsPage__details\">\n              <div className=\"detailsPage__item\">\n                {`Feels: ${Math.round(\n                  detailsOfWeather.main.feels_like - 273.15,\n                )}`}\n                &deg;C\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Min temp: ${Math.round(\n                  detailsOfWeather.main.temp_min - 273.15,\n                )}`}\n                &deg;C\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Max temp: ${Math.round(\n                  detailsOfWeather.main.temp_max - 273.15,\n                )}`}\n                &deg;C\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Wind: ${detailsOfWeather.wind.speed}m/s`}\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Visibility: ${detailsOfWeather.visibility / 1000}km`}\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Humidity: ${detailsOfWeather.main.humidity}%`}\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Pressure: ${detailsOfWeather.main.pressure}gPa`}\n              </div>\n              <div className=\"detailsPage__item\">\n                {`Description: ${detailsOfWeather.weather[0].description}`}\n              </div>\n            </div>\n            <Link\n              className=\"detailsPage__button\"\n              to=\"/\"\n            />\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nDetailsPage.propTypes = {\n  city: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport { MainPage } from './components/MainPage';\nimport { DetailsPage } from './components/DetailsPage';\n\nexport const App = () => {\n  const [detailsForCity, setDetailsForCity] = useState('');\n\n  const getDetailsForCity = (city) => {\n    setDetailsForCity(city);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        Weather: Anywhere in UA\n      </h1>\n\n      <Switch>\n        <Route path=\"/details/:city\">\n          <DetailsPage city={detailsForCity} />\n        </Route>\n\n        <Route path=\"/\" exact>\n          <MainPage getDetailsForCity={getDetailsForCity} />\n        </Route>\n\n        <p>Page not found</p>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}